apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-build-scan-push
  namespace: wcare-tekton-ns
spec:
  inputs:
    resources:
      - name: source-repo
        type: git
    params:
      - name: STOP_PIPELINE
        default: 'false'
        type: string
      - name: STOP_SEVERITY
        default: 'CRITICAL'
        type: string
  outputs:
    resources:
      - name: image-registry
        type: image
  steps:
    - name: image-build
      image: quay.io/buildah/stable:v1.11.0
      workingDir: $(inputs.resources.source-repo.path)        
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      resources: {}
      command:
        - /bin/bash
      args:
        - '-c'
        - >
          set -e

          IMAGE_URL=$(outputs.resources.image-registry.url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')

          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}-temp:${IMAGE_VERSION}"

          buildah bud --tls-verify=false --format=docker -f ./Dockerfile -t ${APP_IMAGE}  .

          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]];
          then
            buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi

          buildah push --tls-verify=false "${APP_IMAGE}" "docker://${APP_IMAGE}"
    - name: image-scan-trivy
      image: docker.io/aquasec/trivy
      workingDir: $(inputs.resources.source-repo.path)
      securityContext:
        privileged: true
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      resources: {}
      command:
        - /bin/sh
      args:
        - '-c'
        - >
          set -e

          IMAGE_URL=$(outputs.resources.image-registry.url)


          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')

          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')


          APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}-temp:${IMAGE_VERSION}"

          export TRIVY_AUTH_URL=${REGISTRY_URL}

          export TRIVY_USERNAME=${REGISTRY_USER}

          export TRIVY_PASSWORD=${REGISTRY_PASSWORD}
    

          STOP_PIPELINE=$(inputs.params.STOP_PIPELINE)

          STOP_SEVERITY=$(inputs.params.STOP_SEVERITY)

          echo "Trivy image scanning.... $APP_IMAGE"
    
          # Trivy scan

          if [ ${STOP_PIPELINE} = "true" ]; then

              echo "Pipeline will be stopped incase of $STOP_SEVERITY severity vulnerabilities found.";

              trivy image --exit-code 1 --severity ${STOP_SEVERITY} ${APP_IMAGE}

              my_exit_code=$?
    
              echo "Scan exit code :--- $my_exit_code"
        
              if [ ${my_exit_code} == 1 ]; then

                  echo "Image scanning completed. ${STOP_SEVERITY} Vulnerabilities found. Pipeline is stopped";
    
                  exit 1;
    
              else
    
                echo "Image scanning completed. No ${STOP_SEVERITY} vulnerabilities found."
      
              fi;

          else

              echo "Pipeline will not be stopped for vulnerabilities.";

              trivy image ${APP_IMAGE}

              echo "Image scanning completed."

          fi;

    - name: image-push
      image: quay.io/buildah/stable:v1.11.0
      workingDir: $(inputs.resources.source-repo.path)
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      resources: {}
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      command:
        - /bin/bash
      args:
        - '-c'
        - >
          set -e

          IMAGE_URL=$(outputs.resources.image-registry.url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')

          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}"

          APP_IMAGE_Temp="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}-temp:${IMAGE_VERSION}"
    
          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
              buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi
    
          buildah pull ${APP_IMAGE_Temp}

          buildah tag ${APP_IMAGE_Temp} ${APP_IMAGE}

          buildah push --tls-verify=false "${APP_IMAGE}"  "docker://${APP_IMAGE}"

          buildah rmi ${APP_IMAGE_Temp}
  volumes:
    - emptyDir: {}
      name: varlibcontainers
